name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        user_config: [user1, user2, user3] #, user4, user5, user6, user7, user8, user9, user10]
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Google Auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GOOGLE_AUTH_CREDENTIALS }}' 
    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'
      with:
        version: '>= 363.0.0'
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./notebooks
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform workspace new ${{ matrix.user_config }} || terraform workspace select ${{ matrix.user_config }}
      working-directory: ./notebooks
      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      # if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: |
        if [ -f users/${{ matrix.user_config }}.tfvars ]; then
          terraform state list
          terraform apply -var-file=users/${{ matrix.user_config }}.tfvars -auto-approve -lock=false
        else
          terraform state list
          terraform state rm google_workbench_instance.${{ matrix.user_config }}-instance
          gcloud notebooks instances delete ${{ matrix.user_config }}-instance --location=${{ env.LOCATION }}
        fi
      working-directory: ./notebooks