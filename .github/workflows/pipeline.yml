name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.gen-matrix.outputs.matrix }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: gen-matrix
        name: Generate matrix
        run: |
          chmod +x gen_matrix.sh
          MATRIX=$(./gen_matrix.sh)
          MATRIX_ESCAPED=$(echo "$MATRIX" | jq -c . | sed 's/ //g')   
          echo "$MATRIX_ESCAPED"    
          echo $GITHUB_OUTPUT
          echo "matrix=$MATRIX_ESCAPED" >> $GITHUB_OUTPUT
        working-directory: ./scripts
  terraform:
    needs: generate-matrix
    name: 'Terraform'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }} #[user1, user2, user3, user4, user5, user6, user7, user8, user9, user10] 
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    # Authenticate to Google Cloud Project
    - name: Google Auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GOOGLE_AUTH_CREDENTIALS }}' 
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -reconfigure
      working-directory: ./notebooks
    # Create and choosing workspace for each user
    - name: Terraform Choose Workspace
      run: terraform workspace new ${{ matrix.user_config }} || terraform workspace select ${{ matrix.user_config }}
      working-directory: ./notebooks
    - name: Terraform Apply
      run: |
        terraform apply -var-file=users/${{ matrix.user_config }} -auto-approve -lock=false
      working-directory: ./notebooks